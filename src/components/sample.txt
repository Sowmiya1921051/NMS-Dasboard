import React, { useEffect, useState } from 'react';
import axios from 'axios';

function BrokerProfile() {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [editIndex, setEditIndex] = useState(null);
    const [editedBroker, setEditedBroker] = useState({});
    const [imagePreview, setImagePreview] = useState(null);
   


    // Function to fetch broker details
    useEffect(() => {
        axios.get('https://bank.infiscripts.com/broker-dealers.php')
            .then(response => {
                if (response.data.status === "success") {
                    setData(response.data.data);
                } else {
                    console.error('Unexpected response structure:', response.data);
                }
                setLoading(false);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
                setLoading(false);
            });
    }, []);

    // Handle input change for edited broker data
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setEditedBroker((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    // Handle image file change
    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setImagePreview(URL.createObjectURL(file)); // Preview the image
            setEditedBroker((prev) => ({
                ...prev,
                photo: file,
            }));
        }
    };

    // Handle save of edited data
    const handleSave = (index) => {
        const updatedData = [...data];
        updatedData[index] = { ...updatedData[index], ...editedBroker };

        setData(updatedData);
        setEditIndex(null);
        setEditedBroker({});
        setImagePreview(null);
        alert(`Broker ${updatedData[index].name} updated successfully!`);
    };

    return (
        <div className="p-6 font-sans bg-gray-100">
             
            <h1 className="text-2xl font-bold text-center mb-6">Broker Profile</h1>
            {loading ? (
                <p className="text-center text-lg text-gray-500">Loading data...</p>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                    {data && data.length > 0 ? (
                        data.map((broker, index) => (
                            <div
                                key={index}
                                className="p-4 bg-white border border-gray-300 rounded-lg shadow-lg flex flex-col items-center"
                            >
                                {/* Display image */}
                                {editIndex === index ? (
                                    <>
                                        {/* Image upload input */}
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={handleImageChange}
                                            className="mb-4"
                                        />
                                        {imagePreview ? (
                                            <img
                                                src={imagePreview}
                                                alt="Preview"
                                                className="w-24 h-24 object-cover rounded-full mb-4"
                                            />
                                        ) : (
                                            <img
                                                src={broker.photo ? `https://bank.infiscripts.com/${broker.photo}` : 'https://via.placeholder.com/100'}
                                                alt="Broker"
                                                className="w-24 h-24 object-cover rounded-full mb-4"
                                            />
                                        )}
                                    </>
                                ) : (
                                    <img
                                        src={broker.photo ? `https://bank.infiscripts.com/${broker.photo}` : 'https://via.placeholder.com/100'}
                                        alt="Broker1"
                                        className="w-24 h-24 object-cover rounded-full mb-4"
                                    />
                                )}

                                {/* Conditionally render input fields for editing */}
                                {editIndex === index ? (
                                    <div className="w-full">
                                        <input
                                            type="text"
                                            name="name"
                                            value={editedBroker.name || broker.name}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="email"
                                            name="email_or_phone"
                                            value={editedBroker.email_or_phone || broker.email_or_phone}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="parentID"
                                            value={editedBroker.parentID || broker.parentID}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="Company"
                                            value={editedBroker.Company || broker.Company}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="dealer_type"
                                            value={editedBroker.dealer_type || broker.dealer_type}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="district"
                                            value={editedBroker.district || broker.district}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="address"
                                            value={editedBroker.address || broker.address}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <input
                                            type="text"
                                            name="phone"
                                            value={editedBroker.phone || broker.phone}
                                            onChange={handleInputChange}
                                            className="w-full p-2 border border-gray-300 rounded-md mb-2"
                                        />
                                        <button
                                            className="bg-green-500 text-white p-2 rounded-md mt-2 hover:bg-green-700"
                                            onClick={() => handleSave(index)}
                                        >
                                            Save
                                        </button>
                                    </div>
                                ) : (
                                    <div>
                                        <p className="text-sm text-gray-600">{broker.email_or_phone || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">Parent ID: {broker.parentID || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">Company: {broker.Company || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">Dealer Type: {broker.dealer_type || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">District: {broker.district || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">Address: {broker.address || 'N/A'}</p>
                                        <p className="text-sm text-gray-600">Phone: {broker.phone || 'N/A'}</p>
                                        <button
                                            className="mt-2 bg-blue-500 text-white p-2 rounded-md hover:bg-blue-700"
                                            onClick={() => {
                                                setEditIndex(index);
                                                setEditedBroker(broker); // Pre-fill form with existing data
                                                setImagePreview(null); // Reset image preview
                                            }}
                                        >
                                            Edit
                                        </button>
                                    </div>
                                )}

                                {/* Add Credits Section */}
                                <div className="mt-4 w-full flex items-center gap-4">
                                    <div className="w-full">
                                        <input
                                            type="number"
                                            id={`credits-${index}`}
                                            placeholder="Enter credits"
                                            className="w-full p-2 border border-gray-300 rounded-md"
                                        />
                                    </div>
                                    <button
                                        className="bg-pink-300 text-white p-2 rounded-md hover:bg-pink-600"
                                        onClick={() => alert(`Credits added for broker ${broker.name}`)}
                                    >
                                        Add
                                    </button>
                                </div>
                            </div>
                        ))
                    ) : (
                        <p className="col-span-3 text-center text-lg text-gray-500">No data available</p>
                    )}
                </div>
            )}
        </div>
    );
}

export default BrokerProfile;



/*sample*/
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

function Home() {
  const [brokers, setBrokers] = useState([]);
  const [expandedDealer, setExpandedDealer] = useState(null);

  useEffect(() => {
    fetch('http://localhost/broker/addBroker.php')
      .then((response) => response.json())
      .then((data) => {
        if (data.status === 'success') {
          setBrokers(data.data);
        }
      })
      .catch((error) => console.error('Error fetching broker data:', error));
  }, []);

  const toggleExpandDealer = (dealerId) => {
    setExpandedDealer((prev) => (prev === dealerId ? null : dealerId));
  };

  // Separate dealers and sub-dealers
  const dealers = brokers.filter((broker) => broker.dealerType === 'Dealer');
  const subDealers = brokers.filter((broker) => broker.dealerType === 'Sub Dealer');

  // Calculate total credit points for a dealer, including their sub-dealers
  const getTotalCredits = (dealerId) => {
    const dealerCredit = parseInt(dealers.find((dealer) => dealer.id === dealerId)?.credit_points || 0, 10);
    const subDealerCredits = subDealers
      .filter((subDealer) => subDealer.parent_dealer === dealerId)
      .reduce((total, subDealer) => total + parseInt(subDealer.credit_points || 0, 10), 0);

    return dealerCredit + subDealerCredits;
  }; 

  return (
    <div style={{ position: 'relative', padding: '20px' }}>
      <Link to="/brokerlist">
        <button className="add-broker-button">Add Broker</button>
      </Link>

      <h1>Broker List</h1>

      {/* Dealers Table */}
      <h2>Dealers</h2>
      <table style={{ width: '100%', borderCollapse: 'collapse' }} border="1">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Company</th>
            <th>Dealer Type</th>
            <th>District</th>
            <th>Address</th>
            <th>Created At</th>
            <th>Dealer Credits</th>
            <th>Total Credits (Including Sub-Dealers)</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {dealers.map((dealer) => (
            <React.Fragment key={dealer.id}>
              <tr
                style={{
                  cursor: 'pointer',
                  backgroundColor: expandedDealer === dealer.id ? '#e6f7ff' : '#f9f9f9',
                }}
                onClick={() => toggleExpandDealer(dealer.id)}
              >
                <td>{dealer.id}</td>
                <td>{dealer.name}</td>
                <td>{dealer.email}</td>
                <td>{dealer.phone}</td>
                <td>{dealer.company}</td>
                <td>{dealer.dealerType}</td>
                <td>{dealer.district}</td>
                <td>{dealer.address}</td>
                <td>{dealer.created_at}</td>
                <td>{dealer.credit_points || 0}</td> {/* Dealer's own credits */}
                <td>{getTotalCredits(dealer.id)}</td> {/* Total credits (dealer + sub-dealers) */}
                <td>
                  {expandedDealer === dealer.id ? 'Hide Sub-Dealers' : 'View Sub-Dealers'}
                </td>
              </tr>
              {expandedDealer === dealer.id && (
                <tr>
                  <td colSpan="12">
                    <table
                      style={{
                        width: '100%',
                        borderCollapse: 'collapse',
                        backgroundColor: '#f1f1f1',
                        marginTop: '10px',
                      }}
                      border="1"
                    >
                      <thead>
                        <tr>
                          <th>ID</th>
                          <th>Name</th>
                          <th>Email</th>
                          <th>Phone</th>
                          <th>Company</th>
                          <th>Dealer Type</th>
                          <th>District</th>
                          <th>Address</th>
                          <th>Created At</th>
                          <th>Credits Points</th> {/* Sub-dealer credits */}
                        </tr>
                      </thead>
                      <tbody>
                        {subDealers
                          .filter((subDealer) => subDealer.parent_dealer === dealer.id)
                          .map((subDealer) => (
                            <tr key={subDealer.id}>
                              <td>{subDealer.id}</td>
                              <td>{subDealer.name}</td>
                              <td>{subDealer.email}</td>
                              <td>{subDealer.phone}</td>
                              <td>{subDealer.company}</td>
                              <td>{subDealer.dealerType}</td>
                              <td>{subDealer.district}</td>
                              <td>{subDealer.address}</td>
                              <td>{subDealer.created_at}</td>
                              <td>{subDealer.credit_points || 0}</td>
                            </tr>
                          ))}
                      </tbody>
                    </table>
                  </td>
                </tr>
              )}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Home;






import React, { useEffect, useState } from "react";

const BrokerDealers = () => {
  const [dealers, setDealers] = useState([]);
  const [filteredDealers, setFilteredDealers] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [selectedDistrict, setSelectedDistrict] = useState("All");
  const [selectedDealer, setSelectedDealer] = useState(null);
  const [dealersWithCredits, setDealersWithCredits] = useState([]);
  const [showCredits, setShowCredits] = useState(false);

  useEffect(() => {
    fetch("https://bank.infiscripts.com/broker-dealers.php")
      .then((response) => response.json())
      .then((data) => {
        if (data.status === "success") {
          setDealers(data.data);
          setFilteredDealers(data.data);
          const uniqueDistricts = [...new Set(data.data.map(dealer => dealer.district))];
          setDistricts(uniqueDistricts);
          
          const creditDealers = data.data.filter(dealer => dealer.creditsverified !== null && dealer.creditsverified > 0);
          setDealersWithCredits(creditDealers);
        }
      })
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  const handleDistrictChange = (event) => {
    const district = event.target.value;
    setSelectedDistrict(district);
    if (district === "All") {
      setFilteredDealers(dealers);
    } else {
      setFilteredDealers(dealers.filter(dealer => dealer.district === district));
    }
  };

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Dealers List</h2>
        <button 
          className="p-2 bg-green-500 text-white rounded relative"
          onClick={() => setShowCredits(!showCredits)}
        >
          {showCredits ? "Hide Credits" : "Show Credits"}
          {dealersWithCredits.length > 0 && <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full"></span>}
        </button>
      </div>
      
      {showCredits && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full h-96 overflow-y-auto flex flex-col">
            <h3 className="text-xl font-bold mb-2">Dealers with Verified Credits</h3>
            <ul className="list-disc pl-5 flex-grow">
              {dealersWithCredits.length > 0 ? (
                dealersWithCredits.map((dealer, index) => (
                  <li key={index} className="mb-1 font-semibold text-blue-700">{dealer.id}: {dealer.name} - Credits Verified: {dealer.creditsverified}</li>
                ))
              ) : (
                <p>No dealers with verified credits available.</p>
              )}
            </ul>
            <button 
              onClick={() => setShowCredits(false)}
              className="mt-4 p-2 bg-red-500 text-white rounded w-full"
            >
              Close
            </button>
          </div>
        </div>
      )}
      
      <div className="mb-4">
        <label className="font-semibold">Filter by District: </label>
        <select 
          value={selectedDistrict} 
          onChange={handleDistrictChange} 
          className="ml-2 p-2 border rounded">
          <option value="All">All</option>
          {districts.map((district, index) => (
            <option key={index} value={district}>{district}</option>
          ))}
        </select>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredDealers.map((dealer, index) => (
          <div key={index} className="border p-4 rounded-lg shadow-md">
            <img
              src={`https://bank.infiscripts.com/${dealer.photo}`}
              alt={dealer.name}
              className="w-full h-52 object-contain rounded"
            />
            <h3 className="text-xl font-semibold mt-2">{dealer.name}</h3>
            <p><strong>Dealer Type:</strong> {dealer.dealer_type}</p>
            <p><strong>District:</strong> {dealer.district}</p>
            <button 
              onClick={() => setSelectedDealer(dealer)}
              className="mt-2 p-2 bg-blue-500 text-white rounded">
              View Details
            </button>
          </div>
        ))}
      </div>

      {selectedDealer && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full h-96 overflow-y-auto flex flex-col">
            <h2 className="text-2xl font-bold mb-2">{selectedDealer.name}</h2>
            <img
              src={`https://bank.infiscripts.com/${selectedDealer.photo}`}
              alt={selectedDealer.name}
              className="w-full h-52 object-contain rounded"
            />
            <p><strong>Email/Phone:</strong> {selectedDealer.email_or_phone}</p>
            <p><strong>Company:</strong> {selectedDealer.Company || "N/A"}</p>
            <p><strong>Dealer Type:</strong> {selectedDealer.dealer_type}</p>
            <p><strong>District:</strong> {selectedDealer.district}</p>
            <p><strong>Address:</strong> {selectedDealer.address}</p>
            <p><strong>Phone:</strong> {selectedDealer.phone}</p>
            <p><strong>Credits Verified:</strong> {selectedDealer.creditsverified !== null ? selectedDealer.creditsverified : "N/A"}</p>
            <p><strong>UPI Transaction:</strong> {selectedDealer.upitrasnaction !== null ? selectedDealer.upitrasnaction : "N/A"}</p>
            <button 
              onClick={() => setSelectedDealer(null)}
              className="mt-4 p-2 bg-red-500 text-white rounded w-full">
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default BrokerDealers;










import React from 'react'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import Home from './components/Home'
import AddBroker from './components/addBroker'
import SideNav from './components/SideNav';
import Sample from './components/sample'
import BrokerDetails from './components/BrokerDetails';
import Dashboard from './components/Dashboard';
import Profile from './components/Profile';
import VerifiedProfile from './components/VerifyProfile';
import UserDetail from './components/UserDetail';
import BrokerList from './components/brokerList';
import BrokerProfile from './components/brokerProfile';
import BrokerVerify from './components/brokerVerify';
import Reports from './components/Reports';
import DealerVerify from './components/DealerVerify';

function App() {
  return (
    <div>
      <BrowserRouter>
        <SideNav /> {/* Render the sidebar */}
        <div className="main-content" style={{ marginLeft: '180px', padding: '20px' }}>
          {/* Main content section adjusted for the sidebar */}
          <Routes>
            <Route path="/" element={<DealerVerify />} />
            <Route path="/broker-details/:id" element={<BrokerDetails />} />
            <Route path="/add-broker" element={<AddBroker />} />
            <Route path="/sample" element={<Sample />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/verfiedProfile" element={<VerifiedProfile />} />
            <Route path="/user-details/:id" element={<UserDetail />} />
            <Route path="/brokerlist" element={<BrokerList />} />
            <Route path="/brokerprofile" element={<BrokerProfile />} />
            <Route path="/brokerverify/:id" element={<BrokerVerify />} />
            <Route path="/reports" element={<Reports />} />
            {/* <Route path="/DealerVerify" element={<DealerVerify />} /> */}
            {/* Add more routes here */}
          </Routes>
        </div>
      </BrowserRouter>
    </div>
  )
}

export default App



